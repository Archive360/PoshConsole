using System;
using System.IO;
using System.Management.Automation;
using System.Management.Automation.Host;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Threading;
using System.Xml;
using System.Collections.ObjectModel;
using System.Collections.Generic;

namespace PoshWpf
{
	[Cmdlet(VerbsCommon.New, "BootsThread", SupportsShouldProcess = false, ConfirmImpact = ConfirmImpact.None, DefaultParameterSetName = "DataTemplate")]
	public class NewBootsThreadCommand : PSCmdlet
	{
		#region Parameters
		[Parameter(
			 Position = 0,
			 Mandatory = false,
			 ValueFromPipeline = true,
			 HelpMessage = "A PowerBoots ScriptBlock to generate WPF content")]
		public ScriptBlock Content { get; set; }

		// TODO!
		[Parameter(
			 Position = 10,
			 ParameterSetName = "FileTemplate",
			 Mandatory = true,
			 ValueFromPipeline = false,
			 HelpMessage = "XAML template file")]
		public FileInfo FileTemplate { get; set; }

		[Parameter(
			 Position = 10,
			 ParameterSetName = "SourceTemplate",
			 Mandatory = true,
			 ValueFromPipeline = false,
			 HelpMessage = "XAML template XmlDocument")]
		//		[Alias("Template")]
		public XmlDocument SourceTemplate { get; set; }

		[Parameter(
			Position = 1,
			Mandatory = false,
			ValueFromPipeline = false,
			HelpMessage = "Show in popup Window")]
		public SwitchParameter Popup { get; set; }
		#region AUTOGENERATED PROPERTIES
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Boolean> AllowDrop { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Boolean> AllowsTransparency { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Boolean> ClipToBounds { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Boolean> Focusable { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Boolean> ForceCursor { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Boolean> IsEnabled { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Boolean> IsHitTestVisible { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Boolean> IsTabStop { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Boolean> OverridesDefaultStyle { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Boolean> ShowActivated { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Boolean> ShowInTaskbar { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Boolean> SnapsToDevicePixels { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Boolean> Topmost { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Double> FontSize { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Double> Height { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Double> Left { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Double> MaxHeight { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Double> MaxWidth { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Double> MinHeight { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Double> MinWidth { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Double> Opacity { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Double> Top { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Double> Width { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Int32> TabIndex { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Nullable<System.Boolean> DialogResult { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		//public System.Object Content { get; set; }
		//[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Object DataContext { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Object Tag { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Object ToolTip { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.String ContentStringFormat { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.String Name { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.String Title { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.String Uid { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Controls.ContextMenu ContextMenu { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Controls.ControlTemplate Template { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Controls.DataTemplateSelector ContentTemplateSelector { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Data.BindingGroup BindingGroup { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DataTemplate ContentTemplate { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Windows.FlowDirection> FlowDirection { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.FontStretch FontStretch { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.FontStyle FontStyle { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.FontWeight FontWeight { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Windows.HorizontalAlignment> HorizontalAlignment { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Windows.HorizontalAlignment> HorizontalContentAlignment { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.CommandBinding[] CommandBindings { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.Cursor Cursor { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.InputBinding[] InputBindings { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.InputScope InputScope { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Markup.XmlLanguage Language { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Media.Brush Background { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Media.Brush BorderBrush { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Media.Brush Foreground { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Media.Brush OpacityMask { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Media.Effects.Effect Effect { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Media.FontFamily FontFamily { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Media.Geometry Clip { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Media.ImageSource Icon { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Media.Transform LayoutTransform { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Media.Transform RenderTransform { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Point RenderTransformOrigin { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Windows.ResizeMode> ResizeMode { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.ResourceDictionary Resources { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Size RenderSize { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Windows.SizeToContent> SizeToContent { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Style FocusVisualStyle { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Style Style { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Thickness BorderThickness { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Thickness Margin { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Thickness Padding { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.TriggerCollection Triggers { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Windows.VerticalAlignment> VerticalAlignment { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Windows.VerticalAlignment> VerticalContentAlignment { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Windows.Visibility> Visibility { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Window Owner { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Windows.WindowStartupLocation> WindowStartupLocation { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Windows.WindowState> WindowState { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public Nullable<System.Windows.WindowStyle> WindowStyle { get; set; }
		#endregion AUTOGENERATED PROPERTIES
		#region AUTOGENERATED EVENTS
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.ComponentModel.CancelEventHandler On_Closing { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.EventHandler On_Activated { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.EventHandler On_Closed { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.EventHandler On_ContentRendered { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.EventHandler On_Deactivated { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.EventHandler On_Initialized { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.EventHandler On_LayoutUpdated { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.EventHandler On_LocationChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.EventHandler On_SourceInitialized { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.EventHandler On_StateChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.EventHandler<System.Windows.Data.DataTransferEventArgs> On_SourceUpdated { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.EventHandler<System.Windows.Data.DataTransferEventArgs> On_TargetUpdated { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Controls.ContextMenuEventHandler On_ContextMenuClosing { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Controls.ContextMenuEventHandler On_ContextMenuOpening { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Controls.ToolTipEventHandler On_ToolTipClosing { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Controls.ToolTipEventHandler On_ToolTipOpening { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DependencyPropertyChangedEventHandler On_DataContextChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DependencyPropertyChangedEventHandler On_FocusableChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DependencyPropertyChangedEventHandler On_IsEnabledChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DependencyPropertyChangedEventHandler On_IsHitTestVisibleChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DependencyPropertyChangedEventHandler On_IsKeyboardFocusedChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DependencyPropertyChangedEventHandler On_IsKeyboardFocusWithinChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DependencyPropertyChangedEventHandler On_IsMouseCapturedChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DependencyPropertyChangedEventHandler On_IsMouseCaptureWithinChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DependencyPropertyChangedEventHandler On_IsMouseDirectlyOverChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DependencyPropertyChangedEventHandler On_IsStylusCapturedChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DependencyPropertyChangedEventHandler On_IsStylusCaptureWithinChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DependencyPropertyChangedEventHandler On_IsStylusDirectlyOverChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DependencyPropertyChangedEventHandler On_IsVisibleChanged { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DragEventHandler On_DragEnter { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DragEventHandler On_DragLeave { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DragEventHandler On_DragOver { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DragEventHandler On_Drop { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DragEventHandler On_PreviewDragEnter { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DragEventHandler On_PreviewDragLeave { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DragEventHandler On_PreviewDragOver { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.DragEventHandler On_PreviewDrop { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.GiveFeedbackEventHandler On_GiveFeedback { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.GiveFeedbackEventHandler On_PreviewGiveFeedback { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.KeyboardFocusChangedEventHandler On_GotKeyboardFocus { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.KeyboardFocusChangedEventHandler On_LostKeyboardFocus { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.KeyboardFocusChangedEventHandler On_PreviewGotKeyboardFocus { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.KeyboardFocusChangedEventHandler On_PreviewLostKeyboardFocus { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.KeyEventHandler On_KeyDown { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.KeyEventHandler On_KeyUp { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.KeyEventHandler On_PreviewKeyDown { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.KeyEventHandler On_PreviewKeyUp { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_MouseDoubleClick { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_MouseDown { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_MouseLeftButtonDown { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_MouseLeftButtonUp { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_MouseRightButtonDown { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_MouseRightButtonUp { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_MouseUp { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_PreviewMouseDoubleClick { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_PreviewMouseDown { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_PreviewMouseLeftButtonDown { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_PreviewMouseLeftButtonUp { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_PreviewMouseRightButtonDown { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_PreviewMouseRightButtonUp { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseButtonEventHandler On_PreviewMouseUp { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseEventHandler On_GotMouseCapture { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseEventHandler On_LostMouseCapture { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseEventHandler On_MouseEnter { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseEventHandler On_MouseLeave { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseEventHandler On_MouseMove { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseEventHandler On_PreviewMouseMove { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseWheelEventHandler On_MouseWheel { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.MouseWheelEventHandler On_PreviewMouseWheel { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.QueryCursorEventHandler On_QueryCursor { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusButtonEventHandler On_PreviewStylusButtonDown { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusButtonEventHandler On_PreviewStylusButtonUp { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusButtonEventHandler On_StylusButtonDown { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusButtonEventHandler On_StylusButtonUp { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusDownEventHandler On_PreviewStylusDown { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusDownEventHandler On_StylusDown { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_GotStylusCapture { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_LostStylusCapture { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_PreviewStylusInAirMove { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_PreviewStylusInRange { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_PreviewStylusMove { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_PreviewStylusOutOfRange { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_PreviewStylusUp { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_StylusEnter { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_StylusInAirMove { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_StylusInRange { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_StylusLeave { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_StylusMove { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_StylusOutOfRange { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusEventHandler On_StylusUp { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusSystemGestureEventHandler On_PreviewStylusSystemGesture { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.StylusSystemGestureEventHandler On_StylusSystemGesture { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.TextCompositionEventHandler On_PreviewTextInput { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.Input.TextCompositionEventHandler On_TextInput { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.QueryContinueDragEventHandler On_PreviewQueryContinueDrag { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.QueryContinueDragEventHandler On_QueryContinueDrag { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.RequestBringIntoViewEventHandler On_RequestBringIntoView { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.RoutedEventHandler On_GotFocus { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.RoutedEventHandler On_Loaded { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.RoutedEventHandler On_LostFocus { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.RoutedEventHandler On_Unloaded { get; set; }
		[Parameter(Mandatory = false, ValueFromPipeline = false)]
		public System.Windows.SizeChangedEventHandler On_SizeChanged { get; set; }
		#endregion AUTOGENERATED EVENTS
		#endregion Parameters

		protected static Window _window = null;
		protected static Dispatcher _dispatcher = null;
		protected static IPSWpfConsole _xamlUI = null;

		protected XmlDocument _template = null;
		protected FrameworkElement _element = null;
		private ItemsControl _host = null;
      private int _index;
		#region Methods

		protected override void BeginProcessing()
		{
			WindowDispatcherAsyncResult result = null;
			if (_window == null)
			{
				_template = GetXaml();

				if (Host.PrivateData.BaseObject is IPSWpfOptions && !Popup.ToBool())
				{
					//((IPSWpfHost)).GetWpfConsole();
					_xamlUI = ((IPSWpfOptions)Host.PrivateData.BaseObject).WpfConsole;
					//_window = _xamlUI.RootWindow;
					_dispatcher = _xamlUI.Dispatcher;
					Presentation.LoadTemplates(_xamlUI.RootWindow);
				}
				else
				{
					result = Presentation.Start(_template, SetWindowParams);
					_window = result.Window;
					_dispatcher = result.Dispatcher;
				}

				if (_template != null)
				{
					ErrorRecord error = (ErrorRecord)_dispatcher.Invoke((Func<ErrorRecord>)(() =>
					{
						ErrorRecord err = null;
						_template.TryLoadXaml(out _element, out err);

						if (_element is Window)
						{
							if (Host is IPSWpfHost)
							{
								_window = (Window)_element;
								_window.Show();
								try
								{
									SetWindowParams(_window);
								}
								catch (Exception ex)
								{
									err = new ErrorRecord(ex, "Error Setting Parameter Property", ErrorCategory.InvalidArgument, Content);
								}
								_dispatcher = _window.Dispatcher;
							}
							_element = null;
						}
						return err;
					}));
					if (error != null) { WriteError(error); }
				}


			}
			base.BeginProcessing();
		}

		private void SetWindowParams(Window window)
		{
         var windows = SessionState.PSVariable.Get("BootsWindows");

         if (windows == null || windows.Value == null || !(windows.Value is BootsWindowDictionary))
         {
            windows = new PSVariable("BootsWindows", BootsWindowDictionary.Instance, ScopedItemOptions.AllScope | ScopedItemOptions.Constant | ScopedItemOptions.ReadOnly );
            windows.Description = "PowerBoots running windows";
            SessionState.PSVariable.Set(windows);
         }
         _index = ((BootsWindowDictionary)windows.Value).Add(window);
         
         // NOTE: We want to remove these once they're closed, but ... 
         // probably not right away, since they might contain data the user wants?
         // window.Closed += (sender, args) => ((List<Window>)windows.Value).Remove((Window)sender);

         //SessionState.PSVariable.Set("BootsWindows", window);
         //SessionState.PSVariable.Set("BootsWindow", window);

			#region AUTOGENERATED PROPERTY PARAMETER CODE
			if (AllowDrop.HasValue)
			{
				window.AllowDrop = AllowDrop.Value;
			}
			if (AllowsTransparency.HasValue)
			{
				window.AllowsTransparency = AllowsTransparency.Value;
			}
			if (ClipToBounds.HasValue)
			{
				window.ClipToBounds = ClipToBounds.Value;
			}
			if (Focusable.HasValue)
			{
				window.Focusable = Focusable.Value;
			}
			if (ForceCursor.HasValue)
			{
				window.ForceCursor = ForceCursor.Value;
			}
			if (IsEnabled.HasValue)
			{
				window.IsEnabled = IsEnabled.Value;
			}
			if (IsHitTestVisible.HasValue)
			{
				window.IsHitTestVisible = IsHitTestVisible.Value;
			}
			if (IsTabStop.HasValue)
			{
				window.IsTabStop = IsTabStop.Value;
			}
			if (OverridesDefaultStyle.HasValue)
			{
				window.OverridesDefaultStyle = OverridesDefaultStyle.Value;
			}
			if (ShowActivated.HasValue)
			{
				window.ShowActivated = ShowActivated.Value;
			}
			if (ShowInTaskbar.HasValue)
			{
				window.ShowInTaskbar = ShowInTaskbar.Value;
			}
			if (SnapsToDevicePixels.HasValue)
			{
				window.SnapsToDevicePixels = SnapsToDevicePixels.Value;
			}
			if (Topmost.HasValue)
			{
				window.Topmost = Topmost.Value;
			}
			if (FontSize.HasValue)
			{
				window.FontSize = FontSize.Value;
			}
			if (Height.HasValue)
			{
				window.Height = Height.Value;
			}
			if (Left.HasValue)
			{
				window.Left = Left.Value;
			}
			if (MaxHeight.HasValue)
			{
				window.MaxHeight = MaxHeight.Value;
			}
			if (MaxWidth.HasValue)
			{
				window.MaxWidth = MaxWidth.Value;
			}
			if (MinHeight.HasValue)
			{
				window.MinHeight = MinHeight.Value;
			}
			if (MinWidth.HasValue)
			{
				window.MinWidth = MinWidth.Value;
			}
			if (Opacity.HasValue)
			{
				window.Opacity = Opacity.Value;
			}
			if (Top.HasValue)
			{
				window.Top = Top.Value;
			}
			if (Width.HasValue)
			{
				window.Width = Width.Value;
			}
			if (TabIndex.HasValue)
			{
				window.TabIndex = TabIndex.Value;
			}
			if (DialogResult != null)
			{
				window.DialogResult = DialogResult;
			}
			//if (Content != null)
			//{
			//   window.Content = Content;
			//}
			if (DataContext != null)
			{
				window.DataContext = DataContext;
			}
			if (Tag != null)
			{
				window.Tag = Tag;
			}
			if (ToolTip != null)
			{
				window.ToolTip = ToolTip;
			}
			if (ContentStringFormat != null)
			{
				window.ContentStringFormat = ContentStringFormat;
			}
			if (Name != null)
			{
				window.Name = Name;
			}
			if (Title != null)
			{
				window.Title = Title;
			}
			if (Uid != null)
			{
				window.Uid = Uid;
			}
			if (ContextMenu != null)
			{
				window.ContextMenu = ContextMenu;
			}
			if (Template != null)
			{
				window.Template = Template;
			}
			if (ContentTemplateSelector != null)
			{
				window.ContentTemplateSelector = ContentTemplateSelector;
			}
			if (BindingGroup != null)
			{
				window.BindingGroup = BindingGroup;
			}
			if (ContentTemplate != null)
			{
				window.ContentTemplate = ContentTemplate;
			}
			if (FlowDirection.HasValue)
			{
				window.FlowDirection = FlowDirection.Value;
			}
			if (FontStretch != null)
			{
				window.FontStretch = FontStretch;
			}
			if (FontStyle != null)
			{
				window.FontStyle = FontStyle;
			}
			if (FontWeight != null)
			{
				window.FontWeight = FontWeight;
			}
			if (HorizontalAlignment.HasValue)
			{
				window.HorizontalAlignment = HorizontalAlignment.Value;
			}
			if (HorizontalContentAlignment.HasValue)
			{
				window.HorizontalContentAlignment = HorizontalContentAlignment.Value;
			}
			if (CommandBindings != null)
			{
				foreach (var val in CommandBindings)
				{
					window.CommandBindings.Add(val);
				}
			}
			if (Cursor != null)
			{
				window.Cursor = Cursor;
			}
			if (InputBindings != null)
			{
				foreach (var val in InputBindings)
				{
					window.InputBindings.Add(val);
				}
			}
			if (InputScope != null)
			{
				window.InputScope = InputScope;
			}
			if (Language != null)
			{
				window.Language = Language;
			}
			if (Background != null)
			{
				window.Background = Background;
			}
			if (BorderBrush != null)
			{
				window.BorderBrush = BorderBrush;
			}
			if (Foreground != null)
			{
				window.Foreground = Foreground;
			}
			if (OpacityMask != null)
			{
				window.OpacityMask = OpacityMask;
			}
         //if (BitmapEffect != null)
         //{
         //   window.BitmapEffect = BitmapEffect;
         //}
         //if (BitmapEffectInput != null)
         //{
         //   window.BitmapEffectInput = BitmapEffectInput;
         //}
			if (Effect != null)
			{
				window.Effect = Effect;
			}
			if (FontFamily != null)
			{
				window.FontFamily = FontFamily;
			}
			if (Clip != null)
			{
				window.Clip = Clip;
			}
			if (Icon != null)
			{
				window.Icon = Icon;
			}
			if (LayoutTransform != null)
			{
				window.LayoutTransform = LayoutTransform;
			}
			if (RenderTransform != null)
			{
				window.RenderTransform = RenderTransform;
			}
			if (RenderTransformOrigin != null)
			{
				window.RenderTransformOrigin = RenderTransformOrigin;
			}
			if (ResizeMode.HasValue)
			{
				window.ResizeMode = ResizeMode.Value;
			}
			if (Resources != null)
			{
				window.Resources = Resources;
			}
			if (RenderSize != null)
			{
				window.RenderSize = RenderSize;
			}
			if (SizeToContent.HasValue)
			{
				window.SizeToContent = SizeToContent.Value;
			}
			if (FocusVisualStyle != null)
			{
				window.FocusVisualStyle = FocusVisualStyle;
			}
			if (Style != null)
			{
				window.Style = Style;
			}
			if (BorderThickness != null)
			{
				window.BorderThickness = BorderThickness;
			}
			if (Margin != null)
			{
				window.Margin = Margin;
			}
			if (Padding != null)
			{
				window.Padding = Padding;
			}
			if (Triggers != null)
			{
				foreach (var val in Triggers)
				{
					window.Triggers.Add(val);
				}
			}
			if (VerticalAlignment.HasValue)
			{
				window.VerticalAlignment = VerticalAlignment.Value;
			}
			if (VerticalContentAlignment.HasValue)
			{
				window.VerticalContentAlignment = VerticalContentAlignment.Value;
			}
			if (Visibility.HasValue)
			{
				window.Visibility = Visibility.Value;
			}
			if (Owner != null)
			{
				window.Owner = Owner;
			}
			if (WindowStartupLocation.HasValue)
			{
				window.WindowStartupLocation = WindowStartupLocation.Value;
			}
			if (WindowState.HasValue)
			{
				window.WindowState = WindowState.Value;
			}
			if (WindowStyle.HasValue)
			{
				window.WindowStyle = WindowStyle.Value;
			}
			#endregion AUTOGENERATED PROPERTY PARAMETER CODE
			#region AUTOGENERATED EVENT PARAMETER CODE
			if (On_Closing != null)
			{
				window.Closing += On_Closing;
			}
			if (On_Activated != null)
			{
				window.Activated += On_Activated;
			}
			if (On_Closed != null)
			{
				window.Closed += On_Closed;
			}
			if (On_ContentRendered != null)
			{
				window.ContentRendered += On_ContentRendered;
			}
			if (On_Deactivated != null)
			{
				window.Deactivated += On_Deactivated;
			}
			if (On_Initialized != null)
			{
				window.Initialized += On_Initialized;
			}
			if (On_LayoutUpdated != null)
			{
				window.LayoutUpdated += On_LayoutUpdated;
			}
			if (On_LocationChanged != null)
			{
				window.LocationChanged += On_LocationChanged;
			}
			if (On_SourceInitialized != null)
			{
				window.SourceInitialized += On_SourceInitialized;
			}
			if (On_StateChanged != null)
			{
				window.StateChanged += On_StateChanged;
			}
			if (On_SourceUpdated != null)
			{
				window.SourceUpdated += On_SourceUpdated;
			}
			if (On_TargetUpdated != null)
			{
				window.TargetUpdated += On_TargetUpdated;
			}
			if (On_ContextMenuClosing != null)
			{
				window.ContextMenuClosing += On_ContextMenuClosing;
			}
			if (On_ContextMenuOpening != null)
			{
				window.ContextMenuOpening += On_ContextMenuOpening;
			}
			if (On_ToolTipClosing != null)
			{
				window.ToolTipClosing += On_ToolTipClosing;
			}
			if (On_ToolTipOpening != null)
			{
				window.ToolTipOpening += On_ToolTipOpening;
			}
			if (On_DataContextChanged != null)
			{
				window.DataContextChanged += On_DataContextChanged;
			}
			if (On_FocusableChanged != null)
			{
				window.FocusableChanged += On_FocusableChanged;
			}
			if (On_IsEnabledChanged != null)
			{
				window.IsEnabledChanged += On_IsEnabledChanged;
			}
			if (On_IsHitTestVisibleChanged != null)
			{
				window.IsHitTestVisibleChanged += On_IsHitTestVisibleChanged;
			}
			if (On_IsKeyboardFocusedChanged != null)
			{
				window.IsKeyboardFocusedChanged += On_IsKeyboardFocusedChanged;
			}
			if (On_IsKeyboardFocusWithinChanged != null)
			{
				window.IsKeyboardFocusWithinChanged += On_IsKeyboardFocusWithinChanged;
			}
			if (On_IsMouseCapturedChanged != null)
			{
				window.IsMouseCapturedChanged += On_IsMouseCapturedChanged;
			}
			if (On_IsMouseCaptureWithinChanged != null)
			{
				window.IsMouseCaptureWithinChanged += On_IsMouseCaptureWithinChanged;
			}
			if (On_IsMouseDirectlyOverChanged != null)
			{
				window.IsMouseDirectlyOverChanged += On_IsMouseDirectlyOverChanged;
			}
			if (On_IsStylusCapturedChanged != null)
			{
				window.IsStylusCapturedChanged += On_IsStylusCapturedChanged;
			}
			if (On_IsStylusCaptureWithinChanged != null)
			{
				window.IsStylusCaptureWithinChanged += On_IsStylusCaptureWithinChanged;
			}
			if (On_IsStylusDirectlyOverChanged != null)
			{
				window.IsStylusDirectlyOverChanged += On_IsStylusDirectlyOverChanged;
			}
			if (On_IsVisibleChanged != null)
			{
				window.IsVisibleChanged += On_IsVisibleChanged;
			}
			if (On_DragEnter != null)
			{
				window.DragEnter += On_DragEnter;
			}
			if (On_DragLeave != null)
			{
				window.DragLeave += On_DragLeave;
			}
			if (On_DragOver != null)
			{
				window.DragOver += On_DragOver;
			}
			if (On_Drop != null)
			{
				window.Drop += On_Drop;
			}
			if (On_PreviewDragEnter != null)
			{
				window.PreviewDragEnter += On_PreviewDragEnter;
			}
			if (On_PreviewDragLeave != null)
			{
				window.PreviewDragLeave += On_PreviewDragLeave;
			}
			if (On_PreviewDragOver != null)
			{
				window.PreviewDragOver += On_PreviewDragOver;
			}
			if (On_PreviewDrop != null)
			{
				window.PreviewDrop += On_PreviewDrop;
			}
			if (On_GiveFeedback != null)
			{
				window.GiveFeedback += On_GiveFeedback;
			}
			if (On_PreviewGiveFeedback != null)
			{
				window.PreviewGiveFeedback += On_PreviewGiveFeedback;
			}
			if (On_GotKeyboardFocus != null)
			{
				window.GotKeyboardFocus += On_GotKeyboardFocus;
			}
			if (On_LostKeyboardFocus != null)
			{
				window.LostKeyboardFocus += On_LostKeyboardFocus;
			}
			if (On_PreviewGotKeyboardFocus != null)
			{
				window.PreviewGotKeyboardFocus += On_PreviewGotKeyboardFocus;
			}
			if (On_PreviewLostKeyboardFocus != null)
			{
				window.PreviewLostKeyboardFocus += On_PreviewLostKeyboardFocus;
			}
			if (On_KeyDown != null)
			{
				window.KeyDown += On_KeyDown;
			}
			if (On_KeyUp != null)
			{
				window.KeyUp += On_KeyUp;
			}
			if (On_PreviewKeyDown != null)
			{
				window.PreviewKeyDown += On_PreviewKeyDown;
			}
			if (On_PreviewKeyUp != null)
			{
				window.PreviewKeyUp += On_PreviewKeyUp;
			}
			if (On_MouseDoubleClick != null)
			{
				window.MouseDoubleClick += On_MouseDoubleClick;
			}
			if (On_MouseDown != null)
			{
				window.MouseDown += On_MouseDown;
			}
			if (On_MouseLeftButtonDown != null)
			{
				window.MouseLeftButtonDown += On_MouseLeftButtonDown;
			}
			if (On_MouseLeftButtonUp != null)
			{
				window.MouseLeftButtonUp += On_MouseLeftButtonUp;
			}
			if (On_MouseRightButtonDown != null)
			{
				window.MouseRightButtonDown += On_MouseRightButtonDown;
			}
			if (On_MouseRightButtonUp != null)
			{
				window.MouseRightButtonUp += On_MouseRightButtonUp;
			}
			if (On_MouseUp != null)
			{
				window.MouseUp += On_MouseUp;
			}
			if (On_PreviewMouseDoubleClick != null)
			{
				window.PreviewMouseDoubleClick += On_PreviewMouseDoubleClick;
			}
			if (On_PreviewMouseDown != null)
			{
				window.PreviewMouseDown += On_PreviewMouseDown;
			}
			if (On_PreviewMouseLeftButtonDown != null)
			{
				window.PreviewMouseLeftButtonDown += On_PreviewMouseLeftButtonDown;
			}
			if (On_PreviewMouseLeftButtonUp != null)
			{
				window.PreviewMouseLeftButtonUp += On_PreviewMouseLeftButtonUp;
			}
			if (On_PreviewMouseRightButtonDown != null)
			{
				window.PreviewMouseRightButtonDown += On_PreviewMouseRightButtonDown;
			}
			if (On_PreviewMouseRightButtonUp != null)
			{
				window.PreviewMouseRightButtonUp += On_PreviewMouseRightButtonUp;
			}
			if (On_PreviewMouseUp != null)
			{
				window.PreviewMouseUp += On_PreviewMouseUp;
			}
			if (On_GotMouseCapture != null)
			{
				window.GotMouseCapture += On_GotMouseCapture;
			}
			if (On_LostMouseCapture != null)
			{
				window.LostMouseCapture += On_LostMouseCapture;
			}
			if (On_MouseEnter != null)
			{
				window.MouseEnter += On_MouseEnter;
			}
			if (On_MouseLeave != null)
			{
				window.MouseLeave += On_MouseLeave;
			}
			if (On_MouseMove != null)
			{
				window.MouseMove += On_MouseMove;
			}
			if (On_PreviewMouseMove != null)
			{
				window.PreviewMouseMove += On_PreviewMouseMove;
			}
			if (On_MouseWheel != null)
			{
				window.MouseWheel += On_MouseWheel;
			}
			if (On_PreviewMouseWheel != null)
			{
				window.PreviewMouseWheel += On_PreviewMouseWheel;
			}
			if (On_QueryCursor != null)
			{
				window.QueryCursor += On_QueryCursor;
			}
			if (On_PreviewStylusButtonDown != null)
			{
				window.PreviewStylusButtonDown += On_PreviewStylusButtonDown;
			}
			if (On_PreviewStylusButtonUp != null)
			{
				window.PreviewStylusButtonUp += On_PreviewStylusButtonUp;
			}
			if (On_StylusButtonDown != null)
			{
				window.StylusButtonDown += On_StylusButtonDown;
			}
			if (On_StylusButtonUp != null)
			{
				window.StylusButtonUp += On_StylusButtonUp;
			}
			if (On_PreviewStylusDown != null)
			{
				window.PreviewStylusDown += On_PreviewStylusDown;
			}
			if (On_StylusDown != null)
			{
				window.StylusDown += On_StylusDown;
			}
			if (On_GotStylusCapture != null)
			{
				window.GotStylusCapture += On_GotStylusCapture;
			}
			if (On_LostStylusCapture != null)
			{
				window.LostStylusCapture += On_LostStylusCapture;
			}
			if (On_PreviewStylusInAirMove != null)
			{
				window.PreviewStylusInAirMove += On_PreviewStylusInAirMove;
			}
			if (On_PreviewStylusInRange != null)
			{
				window.PreviewStylusInRange += On_PreviewStylusInRange;
			}
			if (On_PreviewStylusMove != null)
			{
				window.PreviewStylusMove += On_PreviewStylusMove;
			}
			if (On_PreviewStylusOutOfRange != null)
			{
				window.PreviewStylusOutOfRange += On_PreviewStylusOutOfRange;
			}
			if (On_PreviewStylusUp != null)
			{
				window.PreviewStylusUp += On_PreviewStylusUp;
			}
			if (On_StylusEnter != null)
			{
				window.StylusEnter += On_StylusEnter;
			}
			if (On_StylusInAirMove != null)
			{
				window.StylusInAirMove += On_StylusInAirMove;
			}
			if (On_StylusInRange != null)
			{
				window.StylusInRange += On_StylusInRange;
			}
			if (On_StylusLeave != null)
			{
				window.StylusLeave += On_StylusLeave;
			}
			if (On_StylusMove != null)
			{
				window.StylusMove += On_StylusMove;
			}
			if (On_StylusOutOfRange != null)
			{
				window.StylusOutOfRange += On_StylusOutOfRange;
			}
			if (On_StylusUp != null)
			{
				window.StylusUp += On_StylusUp;
			}
			if (On_PreviewStylusSystemGesture != null)
			{
				window.PreviewStylusSystemGesture += On_PreviewStylusSystemGesture;
			}
			if (On_StylusSystemGesture != null)
			{
				window.StylusSystemGesture += On_StylusSystemGesture;
			}
			if (On_PreviewTextInput != null)
			{
				window.PreviewTextInput += On_PreviewTextInput;
			}
			if (On_TextInput != null)
			{
				window.TextInput += On_TextInput;
			}
			if (On_PreviewQueryContinueDrag != null)
			{
				window.PreviewQueryContinueDrag += On_PreviewQueryContinueDrag;
			}
			if (On_QueryContinueDrag != null)
			{
				window.QueryContinueDrag += On_QueryContinueDrag;
			}
			if (On_RequestBringIntoView != null)
			{
				window.RequestBringIntoView += On_RequestBringIntoView;
			}
			if (On_GotFocus != null)
			{
				window.GotFocus += On_GotFocus;
			}
			if (On_Loaded != null)
			{
				window.Loaded += On_Loaded;
			}
			if (On_LostFocus != null)
			{
				window.LostFocus += On_LostFocus;
			}
			if (On_Unloaded != null)
			{
				window.Unloaded += On_Unloaded;
			}
			if (On_SizeChanged != null)
			{
				window.SizeChanged += On_SizeChanged;
			}
			#endregion AUTOGENERATED EVENT PARAMETER CODE
		}


		// private Huddled.WPF.Controls.Interfaces.IPSXamlConsole xamlUI;
		// private FlowDocument _document = null;


		protected override void ProcessRecord()
		{
			List<ErrorRecord> errors = new List<ErrorRecord>();

			_dispatcher.Invoke((Action)(() =>
			{
				try
				{
					if (Content != null)
					{
						Collection<PSObject> scriptResults = null;

						try
						{
							scriptResults = Content.Invoke();
						}
						catch (Exception ex)
						{
							errors.Add(new ErrorRecord(ex, "Error Processing ScriptBlock", ErrorCategory.SyntaxError, Content));
							if (_window != null)
							{
								_window.Close();
								_window = null;
							}
						}
						if (scriptResults != null)
						{
							foreach (PSObject obj in scriptResults)
							{
								object output = obj.BaseObject;

								// If the output is something that goes in a document ....
								// Then we need to ditch our NewItemsControl and use a FlowDocumentScrollViewer
								if (output is Block || output is Inline)
								{
									Paragraph par;
									FlowDocument doc;
									// if we're dong a XamlUI Popup window (or are not in XamlUI) ...
									if (_window != null)
									{
										par = new Paragraph();
										doc = new FlowDocument(par);
										if (_xamlUI != null)
										{
											par.Background = _xamlUI.CurrentBlock.Background;
											par.Foreground = _xamlUI.CurrentBlock.Foreground;
											doc.Background = _xamlUI.Document.Background;
											doc.Foreground = _xamlUI.Document.Foreground;
										}

										_window.Content = new FlowDocumentScrollViewer
										{
											Document = doc,
											Width = _window.Width,
											Height = _window.Height,
											Margin = new Thickness(0),
											Padding = new Thickness(0),
											IsToolBarVisible = true
										};
									}
									else
									{
										par = _xamlUI.CurrentBlock;
										doc = _xamlUI.Document;
									}


									if (output is Block)
									{
										doc.Blocks.InsertAfter(par, (Block)output);
									}
									else
									{
										par.Inlines.Add((Inline)output);
									}
								}
								else
								{
									if (_host == null) { _host = XamlHelper.NewItemsControl(); }
									if (_window == null && _host.Parent == null)
									{
										_xamlUI.CurrentBlock.Inlines.Add(new InlineUIContainer(_host));
									}
									else if (_host.Items.Count == 0)
									{
										//    // TODO: use some template-based magic 
										//    // to FIND a predefined ItemsControl, 
										//    // or the place where they want the ItemsControl
										//    //_window.Content
										_window.Content = _host;//.Items.Add();
									}

									if (_element != null)
									{
										ErrorRecord err;
										FrameworkElement el;
										_template.TryLoadXaml(out el, out err);
										el.DataContext = output;
										_host.Items.Add(el);
									}
									else
									{
										_host.Items.Add(output);
									}
								}
							}
						}
					}
					else if (_element != null)
					{
						if (_window == null)
						{
							_xamlUI.CurrentBlock.Inlines.Add(new InlineUIContainer(_element));
						}
						else
						{
							_window.Content = _element;
						}
					}
				}
				catch (Exception ex)
				{
					errors.Add(new ErrorRecord(ex, "Error creating WPF Content", ErrorCategory.NotSpecified, Content));
					if (_window != null)
					{
						_window.Close();
						_window = null;
					}
				}
			}));
			foreach (ErrorRecord err in errors)
			{
				WriteError(err);
			}

         if (_window != null)
         {
            WriteObject(_index);
         }
		}


		protected override void EndProcessing()
		{
			// release only in OutWPFCommand
			//if (_windowCount == 0)
			//{
			_window = null;
			_dispatcher = null;
			_xamlUI = null;
			//}
			base.EndProcessing();
		}


		private XmlDocument GetXaml()
		{
			XmlDocument document = null;
			switch (ParameterSetName)
			{
				case "FileTemplate":
					{
						if (!FileTemplate.Exists)
						{
							#region roll 10 for a saving throw
							string templates = Path.Combine(Path.GetDirectoryName(System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName), "XamlTemplates");
							string template = null;
							// try to magically resolve the file
							template = System.IO.Path.Combine(base.CurrentProviderLocation("FileSystem").Path, FileTemplate.Name);
							if (File.Exists(template))
							{
								FileTemplate = new FileInfo(template);
							}
							else
							{
								template = Path.Combine(templates, FileTemplate.Name);
								if (File.Exists(template))
								{
									document = new XmlDocument();
									document.Load(template);
								}
								else
								{
									throw new FileNotFoundException("Can't find the template file.  There is currently no default template location, so you must specify the path to the template file.", template);
								}
							}
							#endregion saving throw
						}
						else
						{
							document = new XmlDocument();
							document.Load(FileTemplate.FullName);
						}
					}
					break;
				case "SourceTemplate":
					{
						document = SourceTemplate;
					}
					break;
				case "DataTemplate":
					{

					} break;
				default:
					{
						throw new InvalidOperationException("Bad Parameter Set");
					}
			}
			return document;
		}
		#endregion

	}
}
