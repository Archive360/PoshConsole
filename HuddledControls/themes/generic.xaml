<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:huddle="clr-namespace:Huddled.WPF.Controls">
    <Style TargetType="{x:Type huddle:ConsoleControl}">
        <Setter Property="BackgroundColor" Value="Black" />
        <Setter Property="Background" Value="Black" />
        <Setter Property="ForegroundColor" Value="White" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="CaretColor" Value="White"  />
        <Setter Property="ForceCursor" Value="True" />
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="VerticalScrollBarVisibility" Value="Visible" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
        <!--<Setter Property="MinWidth" Value="250"/>-->

        <!--FontFamily="/FontLibrary;Component/#Bitstream Vera Sans Mono"-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type huddle:ConsoleControl}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type Paragraph}">
                            <Setter Property="Margin" Value="0"/>
                        </Style>
                        <Style BasedOn="{x:Null}" TargetType="{x:Type TextBox}">
                            <!-- It turns out that setting this Background is the main way to change the cursor color too!
                                http://blogs.msdn.com/llobo/archive/2007/02/08/changing-caret-color-in-textbox.aspx
                                -->
                            <Setter Property="ForceCursor" Value="True" />
                            <Setter Property="TextWrapping" Value="Wrap" />
                            <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type huddle:ConsoleControl}, AncestorLevel=1}}" />
                            <Setter Property="Background">
                                <Setter.Value>
                                    <Binding Path="CaretColor" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type huddle:ConsoleControl}, AncestorLevel=1}">
                                        <Binding.Converter>
                                            <huddle:ColorToBrushInverter Alpha="255" />
                                        </Binding.Converter>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type TextBox}">
                                        <!-- The textbox insertion caret color is the inverse of it's background color. 
                                    In order to give ourselves control over it, separate from changing the actual background color ...
                                    We use a template with a Border that has it's own background color which can be set manually.

                                    ABOUT TextBoxBase templates: The control template for a TextBox or RichTextBox must include 
                                    an element tagged as the content host, that is, with the Name="PART_ContentHost".  
                                    Despite assurances about template independence, the content host element *must* be 
                                    a ScrollViewer, or an element that derives from Decorator. 
                                    -->
                                        <Border x:Name="Border" 
                                           BorderThickness="0"
                                           Background="{Binding Path=Background}" 
                                           SnapsToDevicePixels="True"
                                           Padding="0,2,10,2">
                                            <ScrollViewer x:Name="PART_ContentHost"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                            Padding="0,0,0,0" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Padding" Value="1"/>
                            <Setter Property="AllowDrop" Value="true"/>
                            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                        </Style>
                        <Style BasedOn="{x:Null}" TargetType="{x:Type PasswordBox}">
                            <!-- It turns out that setting this Background is the main way to change the cursor color too!
                                http://blogs.msdn.com/llobo/archive/2007/02/08/changing-caret-color-in-textbox.aspx
                                -->
                            <Setter Property="ForceCursor" Value="True" />
                            <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type huddle:ConsoleControl}, AncestorLevel=1}}" />
                            <Setter Property="Background">
                                <Setter.Value>
                                    <Binding Path="CaretColor" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type huddle:ConsoleControl}, AncestorLevel=1}">
                                        <Binding.Converter>
                                            <huddle:ColorToBrushInverter Alpha="255" />
                                        </Binding.Converter>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type PasswordBox}">
                                        <!-- The textbox insertion caret color is the inverse of it's background color. 
                                    In order to give ourselves control over it, separate from changing the actual background color ...
                                    We use a template with a Border that has it's own background color which can be set manually.

                                    ABOUT TextBoxBase templates: The control template for a TextBox or RichTextBox must include 
                                    an element tagged as the content host, that is, with the Name="PART_ContentHost".  
                                    Despite assurances about template independence, the content host element *must* be 
                                    a ScrollViewer, or an element that derives from Decorator. 
                                    -->
                                        <Border x:Name="Border" 
                                           BorderThickness="0"
                                           Background="{Binding Path=Background}" 
                                           SnapsToDevicePixels="True"
                                           Padding="0,2,10,2">
                                            <ScrollViewer x:Name="PART_ContentHost"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                            Padding="0,0,0,0" />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Padding" Value="1"/>
                            <Setter Property="AllowDrop" Value="true"/>
                            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                        </Style>
                    </ControlTemplate.Resources>
                    <Border Background="{TemplateBinding Background}">
                        <ScrollViewer Name="PART_ContentHost" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
