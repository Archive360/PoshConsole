<Fluent:RibbonWindow xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                     xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                     xmlns:local="clr-namespace:PoshConsole.Demo"
                     xmlns:Fluent="clr-namespace:Fluent;assembly=Fluent"
                     xmlns:system="clr-namespace:System;assembly=mscorlib"
                     xmlns:poshCode="http://schemas.poshcode.org/wpf/poshcode"
                     xmlns:Controls="clr-namespace:PoshCode.Controls;assembly=PoshCode.Controls"
                     x:Class="PoshConsole.Demo.MainWindow"
                     mc:Ignorable="d" DontUseDwm="False"
                     Title="MainWindow" 
                     Height="517" Width="774"
                     MinHeight="60" MinWidth="80" 
                     WindowState="Normal">
    <Fluent:RibbonWindow.Resources>
        <ResourceDictionary>
            <BooleanToVisibilityConverter x:Key="boolToVisibilityConverter" />
        </ResourceDictionary>
    </Fluent:RibbonWindow.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Fluent:Ribbon AutomaticStateManagement="True" x:Name="ribbon">
            <Fluent:Ribbon.ContextualGroups>
                <Fluent:RibbonContextualTabGroup x:Name="setupGroup"
					BorderBrush="#FF9D00"
					Background="#FF9D00"
					Foreground="#C45300"
					Header="Setup"
					Visibility="Visible" />
                <Fluent:RibbonContextualTabGroup x:Name="specialGroup"
					BorderBrush="Magenta"
					Background="Magenta"
					Foreground="Purple"
					Header="Special"
					Visibility="Visible" />

            </Fluent:Ribbon.ContextualGroups>
            <Fluent:Ribbon.Menu>
                <Grid>
                    <!--Backstage items can be keytipped-->
                    <Fluent:Backstage Visibility="Visible">
                        <Fluent:BackstageTabControl/>
                    </Fluent:Backstage>

                    <Fluent:ApplicationMenu Header="File" Visibility="Visible">
                        <Fluent:ApplicationMenu.RightPaneContent>
                            <StackPanel HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Orientation="Vertical"/>
                        </Fluent:ApplicationMenu.RightPaneContent>

                        <Fluent:MenuItem Header="New">
                            <Fluent:MenuItem Header="Thing"/>
                            <Fluent:MenuItem Header="Other"/>
                        </Fluent:MenuItem>
                        <Fluent:MenuItem Header="Open"/>
                        <Fluent:MenuItem Header="Save As" IsSplited="True">
                            <Fluent:MenuItem Header="Standard format"/>
                            <Fluent:MenuItem Header="Export"/>
                        </Fluent:MenuItem>

                        <Separator />

                        <Fluent:MenuItem Header="Exit" 
							KeyTip="X"
							Command="{Binding ExitCommand}" />
                    </Fluent:ApplicationMenu>
                </Grid>
            </Fluent:Ribbon.Menu>
            <Fluent:Ribbon.ToolBarItems>
                <Fluent:Button Size="Small" Content="Insert" >
                    <Fluent:Button.ToolTip>
                        <Fluent:ScreenTip Title="Insert Chart"
							Text="Insert a chart to illustarate and compare data. &#xA;&#xA;Bar, Pie, Line, Area and Surface are same of the available types."
							HelpTopic="http:\\fluent.codeplex.com"
							DisableReason="Disable reason reason."
							Width="190"
							IsRibbonAligned="True" />
                    </Fluent:Button.ToolTip>
                </Fluent:Button>
            </Fluent:Ribbon.ToolBarItems>

            <Fluent:Ribbon.QuickAccessItems>
                <!--Quick Access toolbar items automatically have ScreenTips of the target -->
                <!--KeyTips in Quick Access Toolbar names automatically-->

                <!--Use Content or Target Property to set QAT item-->
                <Fluent:QuickAccessMenuItem IsChecked="true">
                    <Fluent:Button Header="Pink"
						Command="{Binding TestCommand}"
                                    />
                </Fluent:QuickAccessMenuItem>
                <Fluent:QuickAccessMenuItem Target="{Binding ElementName=pasteButton}" IsChecked="True" />
                <Fluent:QuickAccessMenuItem Target="{Binding ElementName=cutButton}" IsChecked="True" />
                <Fluent:QuickAccessMenuItem Target="{Binding ElementName=copyButton}" />
                <Fluent:QuickAccessMenuItem IsChecked="True" Target="{Binding ElementName=UndoButton}" />
                <Fluent:QuickAccessMenuItem IsChecked="True" Target="{Binding ElementName=RedoButton}" />
            </Fluent:Ribbon.QuickAccessItems>

            <Fluent:RibbonTabItem Header="Insert"
				KeyTip="I"
				IsSeparatorVisible="true"
				ReduceOrder="groupLL, groupLL, groupLL, (groupLL),(groupLL),(groupLL),(groupLL),(groupLL)">
                <Fluent:RibbonGroupBox KeyTip="FG"
					Header=""
					IsLauncherVisible="False"
					x:Name="groupLL">

                    <Fluent:ComboBox IsEditable="False"
						InputWidth="150"
						Header="Test"
						ItemsSource="{Binding FontsViewModel.FontsData}"
						KeyTip="FD">
                        <Fluent:ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding}"
									FontFamily="{Binding}" />
                            </DataTemplate>
                        </Fluent:ComboBox.ItemTemplate>
                    </Fluent:ComboBox>
                    <Fluent:ComboBox IsEditable="False"
						InputWidth="150"
						Header="Test"
						ItemsSource="{Binding FontsViewModel.FontsData}">
                        <Fluent:ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding}"
									FontFamily="{Binding}" />
                            </DataTemplate>
                        </Fluent:ComboBox.ItemTemplate>
                    </Fluent:ComboBox>

                    <Fluent:ComboBox x:Name="FilterComboBox"
						IsReadOnly="True"
						KeyTip="H"
						SelectedIndex="0">
                        <Fluent:ComboBox.Menu>
                            <Fluent:RibbonMenu>
                                <Fluent:MenuItem Header="Test" />
                                <Separator />
                                <Fluent:MenuItem Header="Test" />
                            </Fluent:RibbonMenu>
                        </Fluent:ComboBox.Menu>
                        <system:String>Show All</system:String>
                        <system:String>Read-only</system:String>
                        <system:String>Writeable</system:String>
                    </Fluent:ComboBox>
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox Header="Buttons">
                    <Fluent:Button Header="Enlarge"/>
                    <Fluent:Button Header="Reduce" />
                    <Fluent:Button Header="Cmd" />

                    <Fluent:Button Header="Button with rectangle as icon">
                        <Fluent:Button.Icon>
                            <Rectangle Fill="Green" Height="16" Width="16" />
                        </Fluent:Button.Icon>
                        <Fluent:Button.LargeIcon>
                            <Rectangle Fill="Blue" Height="32" Width="32" />
                        </Fluent:Button.LargeIcon>
                    </Fluent:Button>
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox Header="Test">
                    <StackPanel Orientation="Horizontal">
                        <Fluent:SplitButton x:Name="UndoButton"
							KeyTip="Ctrl+Z"
							Header="Undo"
							Icon="{DynamicResource AppbarUndoIcon}"
							SizeDefinition="Middle,Small"
							Command="ApplicationCommands.Undo"
							FocusManager.IsFocusScope="True"
							CanAddButtonToQuickAccessToolBar="True"
							ClosePopupOnMouseDown="True">
                            <Fluent:MenuItem Header="Begin" />
                            <Fluent:MenuItem Header="Undo something" />
                            <Fluent:MenuItem Header="Undo another thing" />
                        </Fluent:SplitButton>

                        <Fluent:SplitButton x:Name="RedoButton"
							KeyTip="Ctrl+Y"
							Header="Redo"
							Icon="{DynamicResource appbar_redo}"
							SizeDefinition="Middle,Small"
							Command="ApplicationCommands.Redo"
							CanAddButtonToQuickAccessToolBar="True"
							FocusManager.IsFocusScope="True"/>
                    </StackPanel>
                </Fluent:RibbonGroupBox>
            </Fluent:RibbonTabItem>

            <Fluent:RibbonTabItem Header="Tests"
				KeyTip="TESTS">
                <Fluent:RibbonGroupBox Header="LongLongGroup"
					IsLauncherVisible="False">
                    <Fluent:CheckBox Header="Text 1"/>
                    <Fluent:CheckBox Header="Text 2"/>
                    <Fluent:CheckBox Header="Text 3"/>
                </Fluent:RibbonGroupBox>


                <Fluent:RibbonGroupBox Header="LongLongGroup"
					IsLauncherVisible="False">
                    <Fluent:ToggleButton Header="blah blah"
						SizeDefinition="Small">
                        <Fluent:ToggleButton.Icon>
                            <Grid>
                                <Image />
                                <TextBlock Text="1" />
                            </Grid>
                        </Fluent:ToggleButton.Icon>
                    </Fluent:ToggleButton>
                    <Fluent:SplitButton Header="blah blah"
						SizeDefinition="Small">
                        <Fluent:SplitButton.Icon>
                            <Grid>
                                <Image />
                                <TextBlock Text="1" />
                            </Grid>
                        </Fluent:SplitButton.Icon>
                    </Fluent:SplitButton>
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox Header="LongLongGroup"
					IsLauncherVisible="False">
                    <Fluent:TextBox x:Name="textBox"
						InputWidth="70"
						MaxLength="5"
						Header="Text"
						Text="CurrentText" />

                    <Fluent:Button Header="PrintVisual"/>
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox>
                    <Fluent:DropDownButton HorizontalAlignment="Left"
						SizeDefinition="Small">
                        <Fluent:DropDownButton.Icon>
                            <Grid>
                                <Image 
									Width="16"
									Height="16" />
                                <Rectangle VerticalAlignment="Bottom"
									Height="4"
									Width="16"
									HorizontalAlignment="Center">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{Binding ColorViewModel.HighlightColor, Mode=TwoWay}" />
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Grid>
                        </Fluent:DropDownButton.Icon>
                        <Fluent:ColorGallery Mode="HighlightColors"
							SelectedColor="{Binding ColorViewModel.HighlightColor, Mode=TwoWay}"
							IsAutomaticColorButtonVisible="False" />
                    </Fluent:DropDownButton>
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox Header="ToggleButton">
                    <Fluent:ToggleButton Header="Button1"
						GroupName="Group1" />
                    <Fluent:ToggleButton Header="Button1"
						GroupName="Group1" />
                    <Fluent:ToggleButton Header="Button1"
						GroupName="Group1" />
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox>
                    <Fluent:ToggleButton x:Name="ShowDetailButton"
						Header="Detail" />
                    <Fluent:ToggleButton x:Name="ShowMoreButton"
						Header="More" />
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox Header="TestOne">
                    <Fluent:ComboBox Header="Test"
						InputWidth="120" />
                    <Separator />

                    <Fluent:ComboBox Header="Test"
						InputWidth="120"
						Visibility="Visible" />
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox>
                    <Fluent:ComboBox Header="Test"
						InputWidth="120" />
                    <Separator />

                    <Fluent:ComboBox Header="Test"
						InputWidth="120"
						Visibility="Visible" />
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox >
                    <Fluent:ComboBox Header="Test"
						InputWidth="120" />
                    <Separator />

                    <Fluent:ComboBox Header="Test"
						InputWidth="120"
						Visibility="{Binding IsChecked, Converter={StaticResource boolToVisibilityConverter}, ElementName=ShowDetailButton}" />
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox Visibility="{Binding IsChecked, Converter={StaticResource boolToVisibilityConverter}, ElementName=ShowMoreButton}">
                    <Fluent:ComboBox Header="Test"
						InputWidth="120" />
                    <Separator />

                    <Fluent:ComboBox Header="Test"
						InputWidth="120"
						Visibility="{Binding IsChecked, Converter={StaticResource boolToVisibilityConverter}, ElementName=ShowDetailButton}" />
                </Fluent:RibbonGroupBox>

            </Fluent:RibbonTabItem>

        </Fluent:Ribbon>

        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="1*"/>
                <RowDefinition Height="2*"/>
            </Grid.RowDefinitions>
            <GridSplitter HorizontalAlignment="Stretch" Grid.Row="0" Height="5" VerticalAlignment="Bottom"/>
            <ContentControl Grid.Row="0"/>

            <poshCode:PoshConsole Grid.Row="1" x:Name="PoshConsole" Content="MainContent" Progress="Progress"
				Title="PoshConsole" IsSelectionEnabled="True" 
				Background="#00000000" 
				FontSize="12" FontFamily="Consolas"
				HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />            
        </Grid>

        <Fluent:StatusBar
			DataContext="{Binding ElementName=PoshConsole}"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Bottom"
			Height="25"
			Grid.Row="2">
            <Fluent:StatusBarItem Title="Words Width"
				Value="150"
				HorizontalAlignment="Left">
                <TextBlock Text="{Binding BufferSize, Mode=OneWayToSource}" />
            </Fluent:StatusBarItem>
            <Separator HorizontalAlignment="Left" />
            <Fluent:StatusBarItem Title="Selected Words"
				Value="15"
				ToolTip="This is Selected Words"
				Content="15"
				HorizontalAlignment="Left" />
            <Separator HorizontalAlignment="Left" />
            <Fluent:StatusBarItem Title="Zoom"
				HorizontalAlignment="Right"
				Value="{Binding Value, ElementName=zoomSlider, StringFormat=\{0:P\}}" />
            <Fluent:StatusBarItem Title="Zoom Slider"
				HorizontalAlignment="Right">
                <Slider x:Name="zoomSlider"
					Minimum="0.5"
					Maximum="2.0"
					IsDirectionReversed="False"
					Style="{DynamicResource ZoomSliderStyle}"
					Value="{Binding Zoom}"
					IsSnapToTickEnabled="True"
					TickFrequency="0.1"
					SmallChange="0.1"
					LargeChange="0.1"
					ValueChanged="ZoomSlider_OnValueChanged"/>
            </Fluent:StatusBarItem>
        </Fluent:StatusBar>
    </Grid>
</Fluent:RibbonWindow>
